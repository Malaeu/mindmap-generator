#!/usr/bin/env python3
"""
–ü–†–û–°–¢–û–ô –ö–õ–ê–°–°-–¢–ï–°–¢ –ë–ï–ó HERMITE
=============================
–§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ —á–∏—Å—Ç—ã—Ö –≥–∞—É—Å—Å–∏–∞–Ω–∞—Ö –¥–ª—è —á—ë—Ç–∫–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
"""

import numpy as np
from fourier_conventions import GaussianPair, compute_Q_weil
from rich.console import Console
from rich.table import Table
from rich import box
import matplotlib.pyplot as plt

console = Console()

ZEROS = [
    14.134725, 21.022040, 25.010858, 30.424876, 32.935062,
    37.586178, 40.918719, 43.327073, 48.005151, 49.773832,
    52.970321, 56.446248, 59.347044, 60.831779, 65.112544,
    67.079811, 69.546402, 72.067158, 75.704691, 77.144840,
    79.337375, 82.910381, 84.735493, 87.425275, 88.809111,
    92.491899, 94.651344, 95.870634, 98.831194, 101.317851
]

def test_gaussian_class():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∫–ª–∞—Å—Å–∞ –≥–∞—É—Å—Å–∏–∞–Ω"""
    console.print("[bold cyan]–ö–õ–ê–°–°-–¢–ï–°–¢: –ì–ê–£–°–°–ò–ê–ù–´[/bold cyan]")
    console.print("[dim]–ö—Ä–∏—Ç–µ—Ä–∏–π –í–µ–π–ª—è Q ‚â• 0 –¥–ª—è —Å–µ–º–µ–π—Å—Ç–≤–∞ e^{-t¬≤/(2œÉ¬≤)}[/dim]\n")
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å–µ—Ç–∫–∞ œÉ
    sigmas = np.linspace(0.3, 15.0, 50)
    
    results = []
    positive_count = 0
    
    console.print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º {len(sigmas)} –≥–∞—É—Å—Å–∏–∞–Ω...")
    
    table = Table(box=box.SIMPLE)
    table.add_column("œÉ", style="cyan", justify="center", width=8)
    table.add_column("Q", justify="right", width=10)
    table.add_column("Z", justify="right", width=8)
    table.add_column("A", justify="right", width=8)
    table.add_column("P", justify="right", width=8)
    table.add_column("Status", justify="center", width=6)
    
    for i, sigma in enumerate(sigmas):
        # CRITICAL FIX: Python closure bug - capture sigma via default parameter
        def h(t, s=sigma):
            return np.exp(-(t**2) / (2 * s**2))
        def hhat(xi, s=sigma):
            return np.sqrt(2*np.pi) * s * np.exp(-(s**2) * (xi**2) / 2)
        
        Q, components = compute_Q_weil(h, hhat, ZEROS,
                                     sigma_hint=sigma, verbose=False)
        
        results.append({
            'sigma': sigma,
            'Q': Q,
            'Z': components['Z'],
            'A': components['A'],
            'P': components['P']
        })
        
        if Q >= 0:
            positive_count += 1
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é 5-—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
        if i % 5 == 0 or Q < 0:
            status = "[green]‚úÖ[/green]" if Q >= 0 else "[red]‚ùå[/red]"
            q_color = "green" if Q >= 0 else "red"
            
            table.add_row(
                f"{sigma:.1f}",
                f"[{q_color}]{Q:+.3f}[/{q_color}]",
                f"{components['Z']:+.3f}",
                f"{components['A']:+.3f}",
                f"{components['P']:+.3f}",
                status
            )
    
    console.print(table)
    
    success_rate = positive_count / len(sigmas)
    
    console.print(f"\n[bold]–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∞—Å—Å–∞:[/bold]")
    console.print(f"  ‚úÖ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö Q: {positive_count}/{len(sigmas)}")
    console.print(f"  üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1%}")
    
    q_values = [r['Q'] for r in results]
    console.print(f"  üìà Q ‚àà [{min(q_values):+.3f}, {max(q_values):+.3f}]")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    negative_regions = []
    current_start = None
    
    for r in results:
        if r['Q'] < 0 and current_start is None:
            current_start = r['sigma']
        elif r['Q'] >= 0 and current_start is not None:
            negative_regions.append((current_start, r['sigma']))
            current_start = None
    
    if current_start is not None:
        negative_regions.append((current_start, sigmas[-1]))
    
    if negative_regions:
        console.print(f"\n[red]–û–±–ª–∞—Å—Ç–∏ –≥–¥–µ Q < 0:[/red]")
        for start, end in negative_regions:
            console.print(f"  œÉ ‚àà [{start:.1f}, {end:.1f}]")
    
    # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
    positive_start = None
    for r in results:
        if r['Q'] >= 0:
            positive_start = r['sigma']
            break
    
    positive_end = None
    for r in reversed(results):
        if r['Q'] >= 0:
            positive_end = r['sigma']
            break
    
    if positive_start is not None and positive_end is not None:
        console.print(f"\n[green]–û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å Q > 0:[/green]")
        console.print(f"  œÉ ‚àà [{positive_start:.1f}, {positive_end:.1f}]")
    
    return results, success_rate

def robustness_test(results, zero_counts=[15, 30]):
    """–¢–µ—Å—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –ø—Ä–∏ —Ä–∞–∑–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –Ω—É–ª–µ–π"""
    console.print(f"\n[bold yellow]–¢–ï–°–¢ –£–°–¢–û–ô–ß–ò–í–û–°–¢–ò:[/bold yellow]")
    
    # –ë–µ—Ä—ë–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–∏—Ö œÉ
    good_sigmas = [r['sigma'] for r in results if r['Q'] > 0][:10]
    
    stability_matrix = {}
    
    for n_zeros in zero_counts:
        zeros_subset = ZEROS[:n_zeros] if n_zeros <= len(ZEROS) else ZEROS
        console.print(f"\n–¢–µ—Å—Ç —Å {len(zeros_subset)} –Ω—É–ª—è–º–∏:")
        
        stable_count = 0
        
        table = Table(box=box.SIMPLE)
        table.add_column("œÉ", justify="center")
        table.add_column("Q‚ÇÉ‚ÇÄ", justify="right")
        table.add_column("Q‚ÇÅ‚ÇÖ", justify="right") 
        table.add_column("Œî%", justify="right")
        table.add_column("Status", justify="center")
        
        for sigma in good_sigmas:
            # –ò—Å—Ö–æ–¥–Ω–æ–µ Q (30 –Ω—É–ª–µ–π)
            original = next(r['Q'] for r in results if abs(r['sigma'] - sigma) < 0.1)
            
            # –ù–æ–≤–æ–µ Q - CRITICAL FIX: capture sigma properly
            def h(t, s=sigma):
                return np.exp(-(t**2) / (2 * s**2))
            def hhat(xi, s=sigma):
                return np.sqrt(2*np.pi) * s * np.exp(-(s**2) * (xi**2) / 2)
            
            Q_new, _ = compute_Q_weil(h, hhat, zeros_subset,
                                    sigma_hint=sigma, verbose=False)
            
            # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            rel_change = abs(Q_new - original) / max(abs(original), 1e-10) * 100
            
            is_stable = (Q_new >= 0) and (rel_change < 20)  # <20% –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            
            if is_stable:
                stable_count += 1
                status = "[green]‚úÖ[/green]"
            else:
                status = "[red]‚ùå[/red]"
            
            table.add_row(
                f"{sigma:.1f}",
                f"{original:+.3f}",
                f"{Q_new:+.3f}",
                f"{rel_change:.1f}%",
                status
            )
        
        console.print(table)
        console.print(f"–°—Ç–∞–±–∏–ª—å–Ω—ã—Ö: {stable_count}/{len(good_sigmas)}")
        
        stability_matrix[n_zeros] = stable_count / len(good_sigmas)
    
    overall_stability = min(stability_matrix.values())
    return overall_stability > 0.8  # 80% —Ñ—É–Ω–∫—Ü–∏–π —Å—Ç–∞–±–∏–ª—å–Ω—ã

def create_final_plot(results):
    """–§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è"""
    sigmas = [r['sigma'] for r in results]
    q_values = [r['Q'] for r in results]
    z_values = [r['Z'] for r in results]
    a_values = [r['A'] for r in results]
    p_values = [r['P'] for r in results]
    
    fig, axes = plt.subplots(2, 2, figsize=(12, 10))
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: Q(œÉ)
    ax1 = axes[0, 0]
    colors = ['green' if q >= 0 else 'red' for q in q_values]
    ax1.scatter(sigmas, q_values, c=colors, alpha=0.7, s=20)
    ax1.axhline(y=0, color='black', linestyle='--', alpha=0.5)
    ax1.set_xlabel('œÉ')
    ax1.set_ylabel('Q')
    ax1.set_title('Q(œÉ) –¥–ª—è –≥–∞—É—Å—Å–∏–∞–Ω')
    ax1.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    ax2 = axes[0, 1]
    ax2.plot(sigmas, z_values, 'g-', label='Z', alpha=0.7)
    ax2.plot(sigmas, a_values, 'r-', label='A', alpha=0.7)
    ax2.plot(sigmas, p_values, 'b-', label='P', alpha=0.7)
    ax2.set_xlabel('œÉ')
    ax2.set_ylabel('–ó–Ω–∞—á–µ–Ω–∏–µ')
    ax2.set_title('–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Z, A, P')
    ax2.legend()
    ax2.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 3: –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ Q
    ax3 = axes[1, 0]
    ax3.hist(q_values, bins=30, alpha=0.7, color='blue', edgecolor='black')
    ax3.axvline(x=0, color='red', linestyle='--', linewidth=2)
    ax3.set_xlabel('Q –∑–Ω–∞—á–µ–Ω–∏—è')
    ax3.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
    ax3.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Q')
    ax3.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 4: –û–±–ª–∞—Å—Ç–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    ax4 = axes[1, 1]
    positive_mask = np.array(q_values) >= 0
    ax4.fill_between(sigmas, 0, 1, where=positive_mask, 
                    color='green', alpha=0.3, label='Q ‚â• 0')
    ax4.fill_between(sigmas, 0, 1, where=~positive_mask,
                    color='red', alpha=0.3, label='Q < 0')
    ax4.set_xlabel('œÉ')
    ax4.set_ylabel('–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä')
    ax4.set_title('–ö–∞—Ä—Ç–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏')
    ax4.legend()
    ax4.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('gaussian_class_weil_test.png', dpi=150, bbox_inches='tight')
    console.print("\n[dim]–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ gaussian_class_weil_test.png[/dim]")

def main():
    console.print("[bold cyan]–û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–´–ô –ö–õ–ê–°–°-–¢–ï–°–¢ –ö–†–ò–¢–ï–†–ò–Ø –í–ï–ô–õ–Ø[/bold cyan]\n")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
    results, success_rate = test_gaussian_class()
    
    # –¢–µ—Å—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
    is_robust = robustness_test(results)
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    create_final_plot(results)
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç
    console.print("\n" + "="*60)
    console.print("[bold green]–û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–´–ô –í–ï–†–î–ò–ö–¢:[/bold green]\n")
    
    if success_rate >= 0.8:
        console.print("üéâ [bold green]–ö–õ–ê–°–°-–¢–ï–°–¢ –ü–†–û–ô–î–ï–ù![/bold green]")
        console.print(f"‚úÖ {success_rate:.0%} –≥–∞—É—Å—Å–∏–∞–Ω –¥–∞—é—Ç Q ‚â• 0")
        
        if is_robust:
            console.print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—Ç–æ–π—á–∏–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —á–∏—Å–ª–∞ –Ω—É–ª–µ–π")
        else:
            console.print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä–∞—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω—É–ª–µ–π")
        
        console.print("\n[cyan]–ö—Ä–∏—Ç–µ—Ä–∏–π –í–µ–π–ª—è Q ‚â• 0 –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è –∫–ª–∞—Å—Å–∞ –≥–∞—É—Å—Å–∏–∞–Ω![/cyan]")
        console.print("[cyan]–≠—Ç–æ —Å—Ç—Ä–æ–≥–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Å RH.[/cyan]")
        
        return True
    else:
        console.print("‚ùå [bold red]–ö–õ–ê–°–°-–¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù[/bold red]")
        console.print(f"–¢–æ–ª—å–∫–æ {success_rate:.0%} –≥–∞—É—Å—Å–∏–∞–Ω –¥–∞—é—Ç Q ‚â• 0")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)