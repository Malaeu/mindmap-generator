#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ü–†–û–†–´–í –í –ü–†–û–í–ï–†–ö–ï –ö–†–ò–¢–ï–†–ò–Ø –í–ï–ô–õ–Ø
================================================
–ß–µ—Å—Ç–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø–æ–∏—Å–∫–æ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—á–∫–∏ A_c,
—É–ª—É—á—à–µ–Ω–Ω–æ–π —á–∏—Å–ª–µ–Ω–Ω–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å—é –∏ –∞–Ω–∞–ª–∏–∑–æ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π –ø—Ä–æ—Å—Ç—ã—Ö.

Ylsha, —ç—Ç–æ –Ω–∞—à —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —à—Ç—É—Ä–º!
"""

import numpy as np
from scipy import special, integrate, interpolate
from scipy.linalg import eigvalsh
from scipy.fft import fft, ifft
from scipy.optimize import minimize_scalar
import matplotlib.pyplot as plt
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.progress import track
from rich import box
import time

console = Console()

# –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
ZEROS_50 = np.array([
    14.134725, 21.022040, 25.010858, 30.424876, 32.935062,
    37.586178, 40.918719, 43.327073, 48.005151, 49.773832,
    52.970321, 56.446248, 59.347044, 60.831779, 65.112544,
    67.079811, 69.546402, 72.067158, 75.704691, 77.144840,
    79.337375, 82.910381, 84.735493, 87.425275, 88.809111,
    92.491899, 94.651344, 95.870634, 98.831194, 101.317851,
    103.725538, 105.446623, 107.168611, 111.029536, 111.874659,
    114.320220, 116.226680, 118.790783, 121.370125, 122.946829,
    124.256819, 127.516684, 129.578704, 131.087688, 133.497737,
    134.756510, 138.116042, 139.736209, 141.123707, 143.111846
])

def digamma_weight(t):
    """–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –≤–µ—Å–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: Re œà(1/4 + it/2) - log œÄ"""
    z = 0.25 + 0.5j * t
    psi_val = special.digamma(z)
    return np.real(psi_val) - np.log(np.pi)

def von_mangoldt(n):
    """–§—É–Ω–∫—Ü–∏—è —Ñ–æ–Ω –ú–∞–Ω–≥–æ–ª—å–¥—Ç–∞ Œõ(n)"""
    if n <= 1:
        return 0.0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø—Ä–æ—Å—Ç—ã–µ –¥–æ sqrt(n)
    for p in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]:
        if p > n:
            break
        if n == p:
            return np.log(p)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–µ–ø–µ–Ω–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ
        pk = p
        while pk <= n:
            if pk == n:
                return np.log(p)
            pk *= p
    
    # –î–ª—è –±–æ–ª—å—à–∏—Ö n –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    if n > 50:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –¥–µ–ª–∏–º–æ—Å—Ç—å –Ω–∞ –º–∞–ª—ã–µ –ø—Ä–æ—Å—Ç—ã–µ
        for p in [2, 3, 5, 7, 11]:
            if n % p == 0:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ n —Å—Ç–µ–ø–µ–Ω—å—é p
                m = n
                while m % p == 0:
                    m //= p
                if m == 1:
                    return np.log(p)
                return 0.0
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –±–æ–ª—å—à–∏–µ –Ω–µ—á–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞ - –ø—Ä–æ—Å—Ç—ã–µ (–≥—Ä—É–±–æ, –Ω–æ –¥–ª—è –¥–µ–º–æ)
        if n % 2 != 0:
            return np.log(n)
    
    return 0.0

def create_bump_window(t, width_factor=1.0):
    """–°–æ–∑–¥–∞–µ–º bump —Ñ—É–Ω–∫—Ü–∏—é —Å —Ä–µ–≥—É–ª–∏—Ä—É–µ–º–æ–π —à–∏—Ä–∏–Ω–æ–π"""
    A = width_factor * 3.0  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä!
    window = np.zeros_like(t, dtype=complex)
    mask = np.abs(t) < A
    window[mask] = np.exp(1 / (t[mask]**2 / A**2 - 1))
    return window

def compute_weil_matrix(width_factor=1.0, N=4096, use_adaptive=False):
    """
    –í—ã—á–∏—Å–ª—è–µ–º –º–∞—Ç—Ä–∏—Ü—É Q(h) = Z(h) - A(h) - P(h) —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å—é
    
    Parameters:
    - width_factor: –º–Ω–æ–∂–∏—Ç–µ–ª—å —à–∏—Ä–∏–Ω—ã bump —Ñ—É–Ω–∫—Ü–∏–∏ (A = width_factor √ó 3.0)
    - N: —Ä–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏
    - use_adaptive: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è A
    """
    
    # –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–µ—Ç–∫–∞
    T_max = 50.0
    t = np.linspace(-T_max, T_max, N)
    dt = t[1] - t[0]
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é h
    h = create_bump_window(t, width_factor)
    
    # FFT –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è h_hat
    h_hat = fft(h) * dt
    freqs = np.fft.fftfreq(N, dt) * 2 * np.pi
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —á–∞—Å—Ç–æ—Ç—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
    freq_sort_idx = np.argsort(freqs)
    freqs_sorted = freqs[freq_sort_idx]
    h_hat_sorted = h_hat[freq_sort_idx]
    
    # Z –±–ª–æ–∫: —Å—É–º–º–∞ –ø–æ –Ω—É–ª—è–º –†–∏–º–∞–Ω–∞
    Z_term = np.zeros(N, dtype=complex)
    for gamma in ZEROS_50:
        exp_plus = np.exp(1j * gamma * t)
        exp_minus = np.exp(-1j * gamma * t)
        Z_term += h * (exp_plus + exp_minus)
    Z_term = Z_term * dt
    
    # A –±–ª–æ–∫: –∞—Ä—Ö–∏–º–µ–¥–æ–≤ —á–ª–µ–Ω
    if use_adaptive:
        # –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
        def integrand_real(tau):
            window = create_bump_window(tau - t[0], width_factor)
            weight = digamma_weight(tau)
            return np.real(window * weight)
        
        A_term_real = integrate.quad_vec(
            integrand_real, -T_max, T_max, 
            epsrel=1e-10, limit=100
        )[0]
        
        # –î–ª—è –º–Ω–∏–º–æ–π —á–∞—Å—Ç–∏
        def integrand_imag(tau):
            window = create_bump_window(tau - t[0], width_factor)
            weight = digamma_weight(tau)
            return np.imag(window * weight)
        
        A_term_imag = integrate.quad_vec(
            integrand_imag, -T_max, T_max,
            epsrel=1e-10, limit=100
        )[0]
        
        A_term = A_term_real + 1j * A_term_imag
    else:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
        weights = np.array([digamma_weight(ti) for ti in t])
        A_term = h * weights * dt
    
    # P –±–ª–æ–∫: —Å—É–º–º–∞ –ø–æ –ø—Ä–æ—Å—Ç—ã–º (—Å –∫—É–±–∏—á–µ—Å–∫–æ–π –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–µ–π)
    P_term = np.zeros(N, dtype=complex)
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ç–æ—Ä –¥–ª—è h_hat (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã)
    h_hat_interp_real = interpolate.CubicSpline(freqs_sorted, np.real(h_hat_sorted), extrapolate=False)
    h_hat_interp_imag = interpolate.CubicSpline(freqs_sorted, np.imag(h_hat_sorted), extrapolate=False)
    
    # –°—É–º–º–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ—Å—Ç—ã–º –∏ –∏—Ö —Å—Ç–µ–ø–µ–Ω—è–º
    for n in range(2, 1000):
        lambda_n = von_mangoldt(n)
        if lambda_n > 0:
            log_n = np.log(n)
            
            # –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è h_hat
            h_real_plus = h_hat_interp_real(log_n)
            h_imag_plus = h_hat_interp_imag(log_n)
            h_real_minus = h_hat_interp_real(-log_n)
            h_imag_minus = h_hat_interp_imag(-log_n)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN
            if not (np.isnan(h_real_plus) or np.isnan(h_real_minus)):
                h_hat_at_log_n = h_real_plus + 1j * h_imag_plus
                h_hat_at_minus_log_n = h_real_minus + 1j * h_imag_minus
                P_term -= (lambda_n / np.sqrt(n)) * (h_hat_at_log_n + h_hat_at_minus_log_n)
    
    P_term = P_term / (2 * np.pi)
    
    # –í—ã—á–∏—Å–ª—è–µ–º Q = Z - A - P
    Q = Z_term - A_term - P_term
    
    # –°—Ç—Ä–æ–∏–º 1x1 –º–∞—Ç—Ä–∏—Ü—É (–¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
    Q_matrix = np.array([[np.real(np.sum(Q))]])
    
    return Q_matrix, {
        'Z_norm': np.linalg.norm(Z_term),
        'A_norm': np.linalg.norm(A_term),
        'P_norm': np.linalg.norm(P_term),
        'Q_value': Q_matrix[0, 0]
    }

def find_critical_bandwidth():
    """–ù–∞—Ö–æ–¥–∏–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ A_c, –≥–¥–µ Q —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º"""
    
    console.print("\n[bold cyan]üîç –ü–û–ò–°–ö –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –¢–û–ß–ö–ò A_c[/bold cyan]\n")
    
    results = []
    widths = np.linspace(0.1, 3.0, 30)
    
    for width in track(widths, description="–°–∫–∞–Ω–∏—Ä—É–µ–º —à–∏—Ä–∏–Ω—ã..."):
        Q_matrix, stats = compute_weil_matrix(width_factor=width, N=2048)
        Q_value = stats['Q_value']
        results.append((width, Q_value, stats))
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    table = Table(title="–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å Q –æ—Ç —à–∏—Ä–∏–Ω—ã bump —Ñ—É–Ω–∫—Ü–∏–∏", box=box.ROUNDED)
    table.add_column("Width Factor", style="cyan")
    table.add_column("A = width √ó 3.0", style="yellow")
    table.add_column("Q value", style="magenta")
    table.add_column("Status", style="green")
    
    critical_found = False
    critical_width = None
    
    for width, Q, stats in results:
        A = width * 3.0
        status = "‚úÖ PSD" if Q > 0 else "‚ùå Not PSD"
        
        if Q > 0 and not critical_found:
            critical_found = True
            critical_width = width
            table.add_row(
                f"[bold]{width:.2f}[/bold]",
                f"[bold]{A:.2f}[/bold]",
                f"[bold]{Q:.6f}[/bold]",
                f"[bold green]üéØ CRITICAL![/bold green]"
            )
        else:
            color = "green" if Q > 0 else "red"
            table.add_row(
                f"{width:.2f}",
                f"{A:.2f}",
                f"[{color}]{Q:.6f}[/{color}]",
                status
            )
    
    console.print(table)
    
    if critical_found:
        console.print(f"\n[bold green]‚ú® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –¢–û–ß–ö–ê –ù–ê–ô–î–ï–ù–ê: A_c ‚âà {critical_width * 3.0:.3f}[/bold green]")
    else:
        console.print("\n[bold red]‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ[/bold red]")
    
    # –ì—Ä–∞—Ñ–∏–∫
    plt.figure(figsize=(10, 6))
    widths_plot = [w * 3.0 for w, _, _ in results]
    Q_values = [Q for _, Q, _ in results]
    
    plt.plot(widths_plot, Q_values, 'b-', linewidth=2, label='Q(A)')
    plt.axhline(y=0, color='r', linestyle='--', label='Q = 0')
    if critical_found:
        plt.axvline(x=critical_width * 3.0, color='g', linestyle=':', label=f'A_c ‚âà {critical_width * 3.0:.2f}')
    
    plt.xlabel('Bandwidth A', fontsize=12)
    plt.ylabel('Q value', fontsize=12)
    plt.title('Critical Bandwidth Search for Weil Criterion', fontsize=14, fontweight='bold')
    plt.legend()
    plt.grid(True, alpha=0.3)
    plt.tight_layout()
    plt.savefig('critical_bandwidth.png', dpi=150)
    console.print("\n[dim]–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ critical_bandwidth.png[/dim]")
    
    return critical_width * 3.0 if critical_found else None

def test_numerical_stability():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–µ–Ω–Ω—É—é —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏"""
    
    console.print("\n[bold cyan]üî¨ –¢–ï–°–¢ –ß–ò–°–õ–ï–ù–ù–û–ô –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò[/bold cyan]\n")
    
    grid_sizes = [1024, 2048, 4096, 8192]
    width = 1.0  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —à–∏—Ä–∏–Ω—É
    
    results_standard = []
    results_adaptive = []
    
    for N in track(grid_sizes, description="–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ—Ç–∫–∏..."):
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥
        Q_std, stats_std = compute_weil_matrix(width_factor=width, N=N, use_adaptive=False)
        results_standard.append((N, stats_std['Q_value']))
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–∞–ª—ã—Ö N –∏–∑-–∑–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏)
        if N <= 2048:
            Q_adapt, stats_adapt = compute_weil_matrix(width_factor=width, N=N, use_adaptive=True)
            results_adaptive.append((N, stats_adapt['Q_value']))
    
    # –ê–Ω–∞–ª–∏–∑ –≤–∞—Ä–∏–∞—Ü–∏–∏
    Q_values_std = [Q for _, Q in results_standard]
    variation_std = (max(Q_values_std) - min(Q_values_std)) / abs(np.mean(Q_values_std))
    
    table = Table(title="–ß–∏—Å–ª–µ–Ω–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å", box=box.ROUNDED)
    table.add_column("Grid Size N", style="cyan")
    table.add_column("Q (standard)", style="yellow")
    table.add_column("Q (adaptive)", style="green")
    table.add_column("Relative Change", style="magenta")
    
    Q_prev = results_standard[0][1]
    for i, (N, Q_std) in enumerate(results_standard):
        Q_adapt = results_adaptive[i][1] if i < len(results_adaptive) else "N/A"
        rel_change = abs(Q_std - Q_prev) / abs(Q_prev) if Q_prev != 0 else 0
        
        table.add_row(
            str(N),
            f"{Q_std:.6f}",
            f"{Q_adapt:.6f}" if Q_adapt != "N/A" else "N/A",
            f"{rel_change:.1%}"
        )
        Q_prev = Q_std
    
    console.print(table)
    console.print(f"\n[yellow]–í–∞—Ä–∏–∞—Ü–∏—è (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥): {variation_std:.1%}[/yellow]")
    
    if variation_std < 0.1:
        console.print("[bold green]‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å![/bold green]")
    elif variation_std < 0.3:
        console.print("[yellow]‚ö†Ô∏è –£–º–µ—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å[/yellow]")
    else:
        console.print("[bold red]‚ùå –ü–ª–æ—Ö–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å - –Ω—É–∂–Ω—ã —É–ª—É—á—à–µ–Ω–∏—è![/bold red]")
    
    return variation_std

def analyze_prime_correlations(max_n=1000):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ø—Ä–æ—Å—Ç—ã—Ö vs –º–æ–¥–µ–ª—å –ö—Ä–∞–º–µ—Ä–∞"""
    
    console.print("\n[bold cyan]üîó –ê–ù–ê–õ–ò–ó –ö–û–†–†–ï–õ–Ø–¶–ò–ô –ü–†–û–°–¢–´–•[/bold cyan]\n")
    
    # –°–æ–±–∏—Ä–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–µ –ø—Ä–æ—Å—Ç—ã–µ
    true_primes = []
    for n in range(2, max_n):
        lambda_n = von_mangoldt(n)
        if lambda_n > 0:
            true_primes.append((n, lambda_n))
    
    # –ú–æ–¥–µ–ª—å –ö—Ä–∞–º–µ—Ä–∞: —Å–ª—É—á–∞–π–Ω—ã–µ "–ø—Ä–æ—Å—Ç—ã–µ" —Å –ø–ª–æ—Ç–Ω–æ—Å—Ç—å—é 1/log(n)
    np.random.seed(42)
    cramer_primes = []
    for n in range(2, max_n):
        if np.random.random() < 1/np.log(n):
            cramer_primes.append((n, np.log(n)))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º log(n) –∫–∞–∫ –≤–µ—Å
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    def compute_correlation(primes, delta_max=50):
        correlations = []
        for delta in range(1, delta_max):
            corr_sum = 0
            count = 0
            for p, lambda_p in primes:
                # –ò—â–µ–º –ø—Ä–æ—Å—Ç–æ–µ –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ delta
                for q, lambda_q in primes:
                    if abs(q - p) == delta:
                        corr_sum += lambda_p * lambda_q
                        count += 1
            
            correlations.append(corr_sum / count if count > 0 else 0)
        
        return correlations
    
    true_corr = compute_correlation(true_primes)
    cramer_corr = compute_correlation(cramer_primes)
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    plt.figure(figsize=(12, 5))
    
    plt.subplot(1, 2, 1)
    delta_range = range(1, len(true_corr) + 1)
    plt.plot(delta_range, true_corr, 'b-', label='True primes', linewidth=2)
    plt.plot(delta_range, cramer_corr, 'r--', label='Cram√©r model', linewidth=2)
    plt.xlabel('Distance Œ¥', fontsize=11)
    plt.ylabel('Correlation C(Œ¥)', fontsize=11)
    plt.title('Prime Correlations: True vs Cram√©r', fontsize=12, fontweight='bold')
    plt.legend()
    plt.grid(True, alpha=0.3)
    
    plt.subplot(1, 2, 2)
    diff = np.array(true_corr) - np.array(cramer_corr)
    plt.bar(delta_range, diff, color=['g' if d > 0 else 'r' for d in diff])
    plt.xlabel('Distance Œ¥', fontsize=11)
    plt.ylabel('C_true(Œ¥) - C_Cram√©r(Œ¥)', fontsize=11)
    plt.title('Correlation Difference', fontsize=12, fontweight='bold')
    plt.axhline(y=0, color='k', linestyle='-', linewidth=0.5)
    plt.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('prime_correlations.png', dpi=150)
    console.print("\n[dim]–ì—Ä–∞—Ñ–∏–∫ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ prime_correlations.png[/dim]")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    table = Table(title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π", box=box.ROUNDED)
    table.add_column("Metric", style="cyan")
    table.add_column("True Primes", style="green")
    table.add_column("Cram√©r Model", style="red")
    table.add_column("Difference", style="yellow")
    
    table.add_row(
        "Mean correlation",
        f"{np.mean(true_corr):.6f}",
        f"{np.mean(cramer_corr):.6f}",
        f"{np.mean(diff):.6f}"
    )
    table.add_row(
        "Std deviation",
        f"{np.std(true_corr):.6f}",
        f"{np.std(cramer_corr):.6f}",
        f"{np.std(diff):.6f}"
    )
    table.add_row(
        "Max correlation",
        f"{np.max(true_corr):.6f}",
        f"{np.max(cramer_corr):.6f}",
        f"{np.max(diff):.6f}"
    )
    
    console.print(table)
    
    # –ö–ª—é—á–µ–≤–æ–π –≤—ã–≤–æ–¥
    if np.mean(diff) > 0:
        console.print("\n[bold green]‚ú® –ù–∞—Å—Ç–æ—è—â–∏–µ –ø—Ä–æ—Å—Ç—ã–µ –∏–º–µ—é—Ç –ë–û–õ–¨–®–ï –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π —á–µ–º –º–æ–¥–µ–ª—å –ö—Ä–∞–º–µ—Ä–∞![/bold green]")
        console.print("[yellow]–≠—Ç–æ –º–æ–∂–µ—Ç –æ–±—ä—è—Å–Ω—è—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω–æ—Å—Ç—å Q –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç-—Ñ—É–Ω–∫—Ü–∏–π![/yellow]")
    else:
        console.print("\n[yellow]‚ö†Ô∏è –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –±–ª–∏–∑–∫–∏ –∫ –º–æ–¥–µ–ª–∏ –ö—Ä–∞–º–µ—Ä–∞[/yellow]")
    
    return true_corr, cramer_corr

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
    
    console.print(Panel.fit(
        "[bold cyan]–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ü–†–û–†–´–í –í –ö–†–ò–¢–ï–†–ò–ò –í–ï–ô–õ–Ø[/bold cyan]\n" +
        "[yellow]–ü–æ–∏—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—á–∫–∏ ‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å ‚Ä¢ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏[/yellow]",
        box=box.DOUBLE
    ))
    
    start_time = time.time()
    
    # 1. –ü–æ–∏—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—á–∫–∏
    A_critical = find_critical_bandwidth()
    
    # 2. –¢–µ—Å—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    variation = test_numerical_stability()
    
    # 3. –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
    true_corr, cramer_corr = analyze_prime_correlations()
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    console.print("\n" + "="*60)
    console.print(Panel.fit(
        "[bold green]–§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢[/bold green]",
        box=box.HEAVY
    ))
    
    if A_critical:
        console.print(f"[bold green]‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—á–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: A_c ‚âà {A_critical:.3f}[/bold green]")
        console.print("[yellow]‚Üí Bump —Ñ—É–Ω–∫—Ü–∏–∏ —Å A < A_c –Ω–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—Ç –∫—Ä–∏—Ç–µ—Ä–∏—é –í–µ–π–ª—è[/yellow]")
        console.print("[yellow]‚Üí –î–ª—è A > A_c –º–∞—Ç—Ä–∏—Ü–∞ Q —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è PSD![/yellow]")
    else:
        console.print("[bold red]‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞[/bold red]")
    
    if variation < 0.3:
        console.print(f"[green]‚úÖ –ß–∏—Å–ª–µ–Ω–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: {variation:.1%}[/green]")
    else:
        console.print(f"[red]‚ùå –ü–ª–æ—Ö–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: {variation:.1%}[/red]")
    
    if np.mean(true_corr) > np.mean(cramer_corr):
        console.print("[green]‚úÖ –ü—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞ –∏–º–µ—é—Ç –æ—Å–æ–±—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏![/green]")
    
    elapsed = time.time() - start_time
    console.print(f"\n[dim]–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed:.2f} —Å–µ–∫—É–Ω–¥[/dim]")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open('breakthrough_results.md', 'w') as f:
        f.write("# –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ—Ä—ã–≤–∞ –≤ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –í–µ–π–ª—è\n\n")
        f.write(f"## –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—á–∫–∞\n")
        f.write(f"- A_c ‚âà {A_critical:.3f}\n" if A_critical else "- –ù–µ –Ω–∞–π–¥–µ–Ω–∞\n")
        f.write(f"\n## –ß–∏—Å–ª–µ–Ω–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å\n")
        f.write(f"- –í–∞—Ä–∏–∞—Ü–∏—è: {variation:.1%}\n")
        f.write(f"\n## –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ø—Ä–æ—Å—Ç—ã—Ö\n")
        f.write(f"- –°—Ä–µ–¥–Ω—è—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è (true): {np.mean(true_corr):.6f}\n")
        f.write(f"- –°—Ä–µ–¥–Ω—è—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è (Cram√©r): {np.mean(cramer_corr):.6f}\n")
        f.write(f"- –†–∞–∑–Ω–∏—Ü–∞: {np.mean(true_corr) - np.mean(cramer_corr):.6f}\n")
    
    console.print("\n[dim]–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ breakthrough_results.md[/dim]")

if __name__ == "__main__":
    main()