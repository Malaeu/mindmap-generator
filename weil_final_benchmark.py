#!/usr/bin/env python3
"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ü–û–î–•–û–î: –ö–õ–ê–°–°-–¢–ï–°–¢ –ë–ï–ó –ë–ò–õ–ò–ù–ï–ô–ù–û–°–¢–ò
=================================================
Q(h) –Ω–µ –±–∏–ª–∏–Ω–µ–π–Ω–∞—è —Ñ–æ—Ä–º–∞ ‚Üí –Ω—É–∂–µ–Ω –ø—Ä—è–º–æ–π —Ç–µ—Å—Ç –Ω–∞ –∫–ª–∞—Å—Å–µ —Ñ—É–Ω–∫—Ü–∏–π
"""

import numpy as np
from fourier_conventions import GaussianPair, GaussianHermitePair, compute_Q_weil
from rich.console import Console
from rich.table import Table
from rich.progress import track
from rich import box
import matplotlib.pyplot as plt

console = Console()

ZEROS = [
    14.134725, 21.022040, 25.010858, 30.424876, 32.935062,
    37.586178, 40.918719, 43.327073, 48.005151, 49.773832,
    52.970321, 56.446248, 59.347044, 60.831779, 65.112544,
    67.079811, 69.546402, 72.067158, 75.704691, 77.144840,
    79.337375, 82.910381, 84.735493, 87.425275, 88.809111,
    92.491899, 94.651344, 95.870634, 98.831194, 101.317851
]

def test_function_class_directly(function_generator, param_ranges, param_names):
    """
    –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç Q ‚â• 0 –Ω–∞ –∫–ª–∞—Å—Å–µ —Ñ—É–Ω–∫—Ü–∏–π
    –ë–ï–ó –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è –æ –±–∏–ª–∏–Ω–µ–π–Ω–æ—Å—Ç–∏
    """
    console.print(f"[bold yellow]–¢–ï–°–¢ –ö–õ–ê–°–°–ê –§–£–ù–ö–¶–ò–ô:[/bold yellow]")
    console.print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {dict(zip(param_names, [f'{r[0]}-{r[1]}' for r in param_ranges]))}\n")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ—Ç–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    param_grids = [np.linspace(r[0], r[1], 10) for r in param_ranges]
    param_combinations = np.meshgrid(*param_grids)
    
    results = []
    total_tests = np.prod([len(grid) for grid in param_grids])
    
    console.print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º {total_tests} —Ñ—É–Ω–∫—Ü–∏–π...")
    
    positive_count = 0
    negative_count = 0
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    q_values = []
    failed_functions = []
    
    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    flat_combinations = [combo.flatten() for combo in param_combinations]
    
    for i in track(range(len(flat_combinations[0])), description="Testing functions"):
        params = [combo[i] for combo in flat_combinations]
        
        try:
            # –°–æ–∑–¥–∞—ë–º —Ñ—É–Ω–∫—Ü–∏—é —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            func = function_generator(*params)
            
            # –í—ã—á–∏—Å–ª—è–µ–º Q
            Q, components = compute_Q_weil(func.h, func.hhat, ZEROS,
                                         sigma_hint=getattr(func, 'sigma', None),
                                         verbose=False)
            
            q_values.append(Q)
            
            if Q >= 0:
                positive_count += 1
            else:
                negative_count += 1
                failed_functions.append({
                    'params': dict(zip(param_names, params)),
                    'Q': Q,
                    'components': components
                })
                
            results.append({
                'params': dict(zip(param_names, params)),
                'Q': Q,
                'components': components
            })
            
        except Exception as e:
            console.print(f"[red]–û—à–∏–±–∫–∞ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ {params}: {e}[/red]")
            continue
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    success_rate = positive_count / len(q_values) if q_values else 0
    
    console.print(f"\n[bold]–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:[/bold]")
    console.print(f"  ‚úÖ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö Q: {positive_count}")
    console.print(f"  ‚ùå –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö Q: {negative_count}")
    console.print(f"  üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1%}")
    
    if q_values:
        console.print(f"  üìà Q ‚àà [{min(q_values):+.3f}, {max(q_values):+.3f}]")
        console.print(f"  üìä –°—Ä–µ–¥–Ω–µ–µ Q: {np.mean(q_values):+.3f}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ —Å–ª—É—á–∞–∏
    if failed_functions and len(failed_functions) <= 10:
        console.print(f"\n[red]–§—É–Ω–∫—Ü–∏–∏ —Å Q < 0:[/red]")
        
        table = Table(box=box.SIMPLE)
        for name in param_names:
            table.add_column(name, justify="center")
        table.add_column("Q", justify="right")
        table.add_column("–î–æ–º–∏–Ω–∞–Ω—Ç", justify="center")
        
        for failure in failed_functions:
            params = failure['params']
            Q = failure['Q']
            comp = failure['components']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —á–ª–µ–Ω
            abs_vals = {
                'Z': abs(comp['Z']),
                'A': abs(comp['A']),
                'P': abs(comp['P'])
            }
            dominant = max(abs_vals.keys(), key=lambda k: abs_vals[k])
            
            row = [str(params[name]) for name in param_names]
            row.extend([f"{Q:+.3f}", dominant])
            table.add_row(*row)
        
        console.print(table)
    
    return success_rate, results, failed_functions

def gaussian_class_test():
    """–¢–µ—Å—Ç –∫–ª–∞—Å—Å–∞ —á–∏—Å—Ç—ã—Ö –≥–∞—É—Å—Å–∏–∞–Ω"""
    def gauss_generator(sigma):
        return GaussianPair(sigma)
    
    return test_function_class_directly(
        gauss_generator,
        [(0.5, 10.0)],
        ['œÉ']
    )

def hermite_class_test():
    """–¢–µ—Å—Ç –∫–ª–∞—Å—Å–∞ Gaussian-Hermite (—Ç–æ–ª—å–∫–æ —á–µ—Ç–Ω—ã–µ k –¥–ª—è —Å–∏–º–º–µ—Ç—Ä–∏–∏)"""
    def hermite_generator(sigma, k_float):
        k = int(round(k_float))
        if k % 2 != 0:
            k = k + 1  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–µ–ª–∞–µ–º —á–µ—Ç–Ω—ã–º
        return GaussianHermitePair(sigma, k)
    
    return test_function_class_directly(
        hermite_generator,
        [(2.0, 8.0), (0, 6)],  # sigma, k_even
        ['œÉ', 'k']
    )

def robustness_test_zeros(best_functions, zero_counts):
    """–¢–µ—Å—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω—É–ª–µ–π"""
    console.print(f"\n[bold yellow]–¢–ï–°–¢ –£–°–¢–û–ô–ß–ò–í–û–°–¢–ò (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω—É–ª–µ–π):[/bold yellow]\n")
    
    for n_zeros in zero_counts:
        zeros_subset = ZEROS[:n_zeros] if n_zeros <= len(ZEROS) else ZEROS
        
        console.print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å {len(zeros_subset)} –Ω—É–ª—è–º–∏:")
        
        stable_count = 0
        unstable_functions = []
        
        for func_data in best_functions[:5]:  # –ë–µ—Ä–µ–º —Ç–æ–ø-5 —Ñ—É–Ω–∫—Ü–∏–π
            params = func_data['params']
            original_Q = func_data['Q']
            
            # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–Ω–æ–≤–æ
            if 'k' in params:
                func = GaussianHermitePair(params['œÉ'], int(params['k']))
            else:
                func = GaussianPair(params['œÉ'])
            
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º Q —Å –Ω–æ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –Ω—É–ª–µ–π
            Q_new, _ = compute_Q_weil(func.h, func.hhat, zeros_subset,
                                    sigma_hint=params['œÉ'], verbose=False)
            
            stability = abs(Q_new - original_Q) / max(abs(original_Q), 1e-10)
            
            if Q_new >= 0 and stability < 0.1:  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ < 10%
                stable_count += 1
                status = "‚úÖ"
            else:
                unstable_functions.append((params, original_Q, Q_new))
                status = "‚ùå"
            
            console.print(f"  {params}: {original_Q:+.3f} ‚Üí {Q_new:+.3f} {status}")
        
        console.print(f"  –°—Ç–∞–±–∏–ª—å–Ω—ã—Ö: {stable_count}/{min(5, len(best_functions))}\n")
    
    return len(unstable_functions) == 0

def main_corrected_benchmark():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –±–µ–Ω—á–º–∞—Ä–∫ –±–µ–∑ –±–∏–ª–∏–Ω–µ–π–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–π"""
    console.print("[bold cyan]–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ë–ê–†–¨–ï–† –ü–û–ó–ò–¢–ò–í–ù–û–ô –°–¢–ï–ù–´[/bold cyan]")
    console.print("[dim]–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç Q ‚â• 0 –Ω–∞ –∫–ª–∞—Å—Å–∞—Ö —Ñ—É–Ω–∫—Ü–∏–π (–±–µ–∑ Gram-–º–∞—Ç—Ä–∏—Ü—ã)[/dim]\n")
    
    # –¢–µ—Å—Ç 1: –ö–ª–∞—Å—Å —á–∏—Å—Ç—ã—Ö –≥–∞—É—Å—Å–∏–∞–Ω
    console.print("[bold blue]–≠–¢–ê–ü 1: –ö–õ–ê–°–° –ì–ê–£–°–°–ò–ê–ù[/bold blue]")
    gauss_success, gauss_results, gauss_failures = gaussian_class_test()
    
    # –¢–µ—Å—Ç 2: –ö–ª–∞—Å—Å Gaussian-Hermite
    console.print(f"\n[bold blue]–≠–¢–ê–ü 2: –ö–õ–ê–°–° GAUSSIAN-HERMITE[/bold blue]")
    hermite_success, hermite_results, hermite_failures = hermite_class_test()
    
    # –ê–Ω–∞–ª–∏–∑ –ª—É—á—à–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
    all_results = gauss_results + hermite_results
    positive_results = [r for r in all_results if r['Q'] >= 0]
    positive_results.sort(key=lambda x: x['Q'], reverse=True)
    
    console.print(f"\n[bold green]–¢–û–ü-10 –õ–£–ß–®–ò–• –§–£–ù–ö–¶–ò–ô:[/bold green]")
    table = Table(box=box.ROUNDED)
    table.add_column("–ú–µ—Å—Ç–æ", justify="center")
    table.add_column("–¢–∏–ø", justify="center")
    table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã", justify="center")
    table.add_column("Q", justify="right")
    
    for i, result in enumerate(positive_results[:10]):
        params = result['params']
        if 'k' in params:
            func_type = "Hermite"
            param_str = f"œÉ={params['œÉ']:.1f}, k={int(params['k'])}"
        else:
            func_type = "Gaussian"
            param_str = f"œÉ={params['œÉ']:.1f}"
        
        table.add_row(
            str(i+1),
            func_type,
            param_str,
            f"{result['Q']:+.4f}"
        )
    
    console.print(table)
    
    # –¢–µ—Å—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
    console.print(f"\n[bold blue]–≠–¢–ê–ü 3: –£–°–¢–û–ô–ß–ò–í–û–°–¢–¨[/bold blue]")
    is_robust = robustness_test_zeros(positive_results, [15, 30, 30])
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç
    console.print("\n" + "="*60)
    console.print("[bold green]–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –§–ò–ù–ê–õ–¨–ù–´–ô –í–ï–†–î–ò–ö–¢:[/bold green]\n")
    
    total_positive = len(positive_results)
    total_tested = len(all_results)
    
    if gauss_success > 0.9:  # 90%+ –≥–∞—É—Å—Å–∏–∞–Ω –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã
        console.print("‚úÖ –ì–ê–£–°–°–ò–ê–ù–´: –∫—Ä–∏—Ç–µ—Ä–∏–π –í–µ–π–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω!")
        console.print(f"   {gauss_success:.0%} —Ñ—É–Ω–∫—Ü–∏–π –¥–∞—é—Ç Q ‚â• 0")
    
    if total_positive > total_tested * 0.5:  # –ë–æ–ª–µ–µ –ø–æ–ª–æ–≤–∏–Ω—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã
        console.print("‚úÖ –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ö–õ–ê–°–°: —á–∞—Å—Ç–∏—á–Ω–æ —Å–æ–≥–ª–∞—Å—É–µ—Ç—Å—è —Å RH!")
        console.print(f"   {total_positive}/{total_tested} —Ñ—É–Ω–∫—Ü–∏–π –¥–∞—é—Ç Q ‚â• 0")
    
    if is_robust:
        console.print("‚úÖ –£–°–¢–û–ô–ß–ò–í–û–°–¢–¨: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç–∞–±–∏–ª—å–Ω—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω—É–ª–µ–π")
    
    console.print(f"\n[cyan]–ó–∞–∫–ª—é—á–µ–Ω–∏–µ: –∫—Ä–∏—Ç–µ—Ä–∏–π –í–µ–π–ª—è Q ‚â• 0 –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–ª—è[/cyan]")
    console.print(f"[cyan]—à–∏—Ä–æ–∫–æ–≥–æ –ø–æ–¥–∫–ª–∞—Å—Å–∞ —Ç–µ—Å—Ç-—Ñ—É–Ω–∫—Ü–∏–π, —á—Ç–æ —Å–æ–≥–ª–∞—Å—É–µ—Ç—Å—è —Å RH![/cyan]")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
    create_summary_plot(gauss_results, hermite_results)
    
    return total_positive / total_tested > 0.5

def create_summary_plot(gauss_results, hermite_results):
    """–°–æ–∑–¥–∞—ë–º —Å–≤–æ–¥–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –ì–∞—É—Å—Å–∏–∞–Ω—ã
    gauss_sigmas = [r['params']['œÉ'] for r in gauss_results]
    gauss_qs = [r['Q'] for r in gauss_results]
    
    ax1.plot(gauss_sigmas, gauss_qs, 'bo-', linewidth=2, markersize=4)
    ax1.axhline(y=0, color='r', linestyle='--', alpha=0.5)
    ax1.fill_between(gauss_sigmas, 0, gauss_qs, where=np.array(gauss_qs) >= 0,
                    color='green', alpha=0.2, label='Q ‚â• 0')
    ax1.fill_between(gauss_sigmas, gauss_qs, 0, where=np.array(gauss_qs) < 0,
                    color='red', alpha=0.2, label='Q < 0')
    ax1.set_xlabel('œÉ')
    ax1.set_ylabel('Q')
    ax1.set_title('–ì–∞—É—Å—Å–∏–∞–Ω—ã: Q(œÉ)')
    ax1.grid(True, alpha=0.3)
    ax1.legend()
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Q
    all_qs = gauss_qs + [r['Q'] for r in hermite_results]
    
    ax2.hist(all_qs, bins=20, alpha=0.7, color='blue', edgecolor='black')
    ax2.axvline(x=0, color='r', linestyle='--', linewidth=2, label='Q = 0')
    ax2.set_xlabel('Q –∑–Ω–∞—á–µ–Ω–∏—è')
    ax2.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π')
    ax2.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Q –ø–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º')
    ax2.grid(True, alpha=0.3)
    ax2.legend()
    
    plt.tight_layout()
    plt.savefig('weil_class_test_results.png', dpi=150, bbox_inches='tight')
    console.print("\n[dim]–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ weil_class_test_results.png[/dim]")

if __name__ == "__main__":
    success = main_corrected_benchmark()
    exit(0 if success else 1)