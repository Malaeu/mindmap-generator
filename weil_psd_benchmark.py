#!/usr/bin/env python3
"""
–ë–ê–†–¨–ï–† –ü–û–ó–ò–¢–ò–í–ù–û–ô –°–¢–ï–ù–´: PSD-–¢–ï–°–¢ –î–õ–Ø –ö–†–ò–¢–ï–†–ò–Ø –í–ï–ô–õ–Ø
===================================================
–ü—Ä–æ–≤–µ—Ä—è–µ–º Q ‚â• 0 –Ω–∞ –ö–õ–ê–°–°–ï —Ñ—É–Ω–∫—Ü–∏–π, –∞ –Ω–µ –Ω–∞ –æ–¥–Ω–æ–π –≥–∞—É—Å—Å–∏–∞–Ω–µ
"""

import numpy as np
from rich import box
from rich.console import Console
from rich.table import Table

from fourier_conventions import GaussianHermitePair, GaussianPair, compute_Q_weil, sieve_primes

console = Console()

# –ü–µ—Ä–≤—ã–µ 30 –Ω—É–ª–µ–π –†–∏–º–∞–Ω–∞  
ZEROS = [
    14.134725, 21.022040, 25.010858, 30.424876, 32.935062,
    37.586178, 40.918719, 43.327073, 48.005151, 49.773832,
    52.970321, 56.446248, 59.347044, 60.831779, 65.112544,
    67.079811, 69.546402, 72.067158, 75.704691, 77.144840,
    79.337375, 82.910381, 84.735493, 87.425275, 88.809111,
    92.491899, 94.651344, 95.870634, 98.831194, 101.317851
]

PRIMES = sieve_primes(1000)

def create_function_basis(sigmas, hermite_orders):
    """–°–æ–∑–¥–∞—ë–º –±–∞–∑–∏—Å Gaussian-Hermite —Ñ—É–Ω–∫—Ü–∏–π"""
    basis = []
    labels = []
    
    for sigma in sigmas:
        for k in hermite_orders:
            if k == 0:
                # –ß–∏—Å—Ç–∞—è –≥–∞—É—Å—Å–∏–∞–Ω–∞
                func = GaussianPair(sigma)
                labels.append(f"G(œÉ={sigma})")
            else:
                # –ì–∞—É—Å—Å–∏–∞–Ω–∞ √ó –≠—Ä–º–∏—Ç
                func = GaussianHermitePair(sigma, k)
                labels.append(f"GH(œÉ={sigma},k={k})")
            
            basis.append(func)
    
    return basis, labels

def compute_gram_matrix(basis, labels, zeros=None, verbose=True):
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ Gram-–º–∞—Ç—Ä–∏—Ü—ã —á–µ—Ä–µ–∑ –ø–æ–ª—è—Ä–∏–∑–∞—Ü–∏—é"""
    if zeros is None:
        zeros = ZEROS
    
    n = len(basis)
    G = np.zeros((n, n))
    
    if verbose:
        console.print(f"[yellow]–í—ã—á–∏—Å–ª–µ–Ω–∏–µ Gram-–º–∞—Ç—Ä–∏—Ü—ã {n}√ó{n}...[/yellow]")
    
    # –î–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: G_ii = Q(h_i)
    for i in range(n):
        func = basis[i]
        Q_ii, _ = compute_Q_weil(func.h, func.hhat, zeros, 
                               sigma_hint=func.sigma, verbose=False)
        G[i, i] = Q_ii
        
        if verbose and i % 5 == 0:
            console.print(f"  Q({labels[i]}) = {Q_ii:+.4f}")
    
    # –ù–µ–¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –ø–æ–ª—è—Ä–∏–∑–∞—Ü–∏—é
    # Q(h_i, h_j) = 1/2 [Q(h_i + h_j) - Q(h_i) - Q(h_j)]
    for i in range(n):
        for j in range(i+1, n):
            func_i, func_j = basis[i], basis[j]
            
            # –§—É–Ω–∫—Ü–∏—è —Å—É–º–º—ã
            def h_sum(t):
                return func_i.h(t) + func_j.h(t)
            def hhat_sum(xi):
                return func_i.hhat(xi) + func_j.hhat(xi)
            
            # –°—Ä–µ–¥–Ω—è—è œÉ –¥–ª—è –∞—Ä—Ö–∏–º–µ–¥–æ–≤–∞ —á–ª–µ–Ω–∞
            sigma_avg = (func_i.sigma + func_j.sigma) / 2.0
            
            Q_sum, _ = compute_Q_weil(h_sum, hhat_sum, zeros,
                                    sigma_hint=sigma_avg, verbose=False)
            
            # –ü–æ–ª—è—Ä–∏–∑–∞—Ü–∏—è
            G[i, j] = G[j, i] = 0.5 * (Q_sum - G[i, i] - G[j, j])
    
    return G

def analyze_psd(G, labels, tolerance=1e-10):
    """–ê–Ω–∞–ª–∏–∑ PSD —Å–≤–æ–π—Å—Ç–≤ –º–∞—Ç—Ä–∏—Ü—ã"""
    eigenvalues = np.linalg.eigvals(G)
    eigenvalues = np.sort(eigenvalues)
    
    min_eigenvalue = np.min(eigenvalues)
    is_psd = min_eigenvalue >= -tolerance
    
    console.print(f"\n[bold]–ê–Ω–∞–ª–∏–∑ PSD (–¥–æ–ø—É—Å–∫: {tolerance:.0e}):[/bold]")
    
    table = Table(box=box.SIMPLE)
    table.add_column("‚Ññ", justify="center")
    table.add_column("Œª", justify="right")
    table.add_column("–°—Ç–∞—Ç—É—Å", justify="center")
    
    for i, lam in enumerate(eigenvalues):
        status = "[green]‚úÖ[/green]" if lam >= -tolerance else "[red]‚ùå[/red]"
        color = "green" if lam >= -tolerance else "red"
        
        table.add_row(
            str(i+1),
            f"[{color}]{lam:+.6f}[/{color}]",
            status
        )
    
    console.print(table)
    
    if is_psd:
        console.print(f"\n[bold green]‚úÖ –ú–∞—Ç—Ä–∏—Ü–∞ PSD! (Œª_min = {min_eigenvalue:.2e})[/bold green]")
    else:
        console.print(f"\n[bold red]‚ùå –ú–∞—Ç—Ä–∏—Ü–∞ –ù–ï PSD! (Œª_min = {min_eigenvalue:.2e})[/bold red]")
    
    return is_psd, min_eigenvalue, eigenvalues

def tail_bounds_analysis(basis, labels, zeros=None):
    """–ê–Ω–∞–ª–∏–∑ —Ö–≤–æ—Å—Ç–æ–≤—ã—Ö –æ—à–∏–±–æ–∫"""
    if zeros is None:
        zeros = ZEROS
    
    console.print("\n[yellow]–ê–Ω–∞–ª–∏–∑ —Ö–≤–æ—Å—Ç–æ–≤—ã—Ö –æ—à–∏–±–æ–∫:[/yellow]")
    
    # Z-tail: –æ—Ü–µ–Ω–∫–∞ –¥–ª—è Œ≥ > Œ≥_max
    gamma_max = max(zeros)
    
    # P-tail: –∑–∞–≤–∏—Å–∏—Ç –æ—Ç œÉ –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    table = Table(box=box.SIMPLE)
    table.add_column("–§—É–Ω–∫—Ü–∏—è", style="cyan")
    table.add_column("Z-tail", justify="right")
    table.add_column("P-tail", justify="right") 
    table.add_column("Relative Error", justify="right")
    
    for func, label in zip(basis, labels, strict=False):
        # –ì—Ä—É–±–∞—è –æ—Ü–µ–Ω–∫–∞ Z-tail —á–µ—Ä–µ–∑ –≥–∞—É—Å—Å–∏–∞–Ω
        from scipy.integrate import quad
        def z_tail_integrand(t):
            return func.h(t) * np.log(max(t, 1.0)) / (2*np.pi)
        
        z_tail, _ = quad(z_tail_integrand, gamma_max, np.inf, limit=200)
        
        # P-tail —á–µ—Ä–µ–∑ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —É–±—ã–≤–∞–Ω–∏–µ
        sigma = func.sigma
        N_max = 1000  # –ù–∞—à –æ–±—ã—á–Ω—ã–π —Å—Ä–µ–∑
        p_tail_est = func.hhat(np.log(N_max)) * np.log(N_max) / (2*np.pi)
        
        # –ü–æ–ª–Ω–æ–µ Q –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        Q_full, _ = compute_Q_weil(func.h, func.hhat, zeros, 
                                 sigma_hint=sigma, verbose=False)
        
        rel_error = (abs(z_tail) + abs(p_tail_est)) / max(abs(Q_full), 1e-10)
        
        table.add_row(
            label,
            f"{z_tail:.2e}",
            f"{p_tail_est:.2e}",
            f"{rel_error:.1%}"
        )
    
    console.print(table)

def robustness_test(basis, labels, scale_factors=[1, 2, 4]):
    """–¢–µ—Å—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ —á–∏—Å–ª–∞ –Ω—É–ª–µ–π"""
    console.print("\n[yellow]–¢–µ—Å—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ PSD:[/yellow]")
    
    results = {}
    
    for scale in scale_factors:
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω—É–ª–µ–π
        n_zeros = min(len(ZEROS) * scale, len(ZEROS))  # –ù–µ –º–æ–∂–µ–º –±–æ–ª—å—à–µ —á–µ–º –µ—Å—Ç—å
        zeros_subset = ZEROS[:n_zeros]
        
        console.print(f"\n  –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å {n_zeros} –Ω—É–ª—è–º–∏:")
        
        G = compute_gram_matrix(basis, labels, zeros_subset, verbose=False)
        is_psd, min_eig, _ = analyze_psd(G, labels, tolerance=1e-8)
        
        results[scale] = {
            'n_zeros': n_zeros,
            'min_eigenvalue': min_eig,
            'is_psd': is_psd
        }
        
        console.print(f"    Œª_min = {min_eig:+.6f} {'‚úÖ' if is_psd else '‚ùå'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
    min_eigs = [results[s]['min_eigenvalue'] for s in scale_factors]
    is_stable = all(eig >= -1e-8 for eig in min_eigs)
    
    if is_stable:
        console.print("\n[bold green]‚úÖ PSD —Å—Ç–∞–±–∏–ª—å–Ω–æ –ø—Ä–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–∏![/bold green]")
    else:
        console.print("\n[bold red]‚ùå PSD –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ –ø—Ä–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–∏![/bold red]")
    
    return is_stable, results

def main_benchmark():
    """–û—Å–Ω–æ–≤–Ω–æ–π –±–µ–Ω—á–º–∞—Ä–∫ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –±–∞—Ä—å–µ—Ä–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–π —Å—Ç–µ–Ω—ã"""
    console.print("[bold cyan]–ë–ê–†–¨–ï–† –ü–û–ó–ò–¢–ò–í–ù–û–ô –°–¢–ï–ù–´: PSD-–ë–ï–ù–ß–ú–ê–†–ö[/bold cyan]")
    console.print("[dim]–ö—Ä–∏—Ç–µ—Ä–∏–π –í–µ–π–ª—è –¥–ª—è –∫–ª–∞—Å—Å–∞ Gaussian-Hermite —Ñ—É–Ω–∫—Ü–∏–π[/dim]\n")
    
    # –°–æ–∑–¥–∞—ë–º –±–∞–∑–∏—Å —Ñ—É–Ω–∫—Ü–∏–π
    sigmas = [2.0, 3.0, 4.0, 5.0, 6.0]
    hermite_orders = [0, 2, 4]  # –¢–æ–ª—å–∫–æ —á—ë—Ç–Ω—ã–µ –¥–ª—è —Å–∏–º–º–µ—Ç—Ä–∏–∏
    
    basis, labels = create_function_basis(sigmas, hermite_orders)
    console.print(f"–°–æ–∑–¥–∞–Ω –±–∞–∑–∏—Å –∏–∑ {len(basis)} —Ñ—É–Ω–∫—Ü–∏–π:")
    for label in labels:
        console.print(f"  - {label}")
    
    # 1. Gram-–º–∞—Ç—Ä–∏—Ü–∞
    console.print("\n[bold yellow]1. –ü–û–°–¢–†–û–ï–ù–ò–ï GRAM-–ú–ê–¢–†–ò–¶–´[/bold yellow]")
    G = compute_gram_matrix(basis, labels, ZEROS)
    
    # 2. PSD –∞–Ω–∞–ª–∏–∑
    console.print("\n[bold yellow]2. PSD-–ê–ù–ê–õ–ò–ó[/bold yellow]")
    is_psd, min_eig, eigenvalues = analyze_psd(G, labels)
    
    # 3. –•–≤–æ—Å—Ç–æ–≤—ã–µ –æ—à–∏–±–∫–∏
    console.print("\n[bold yellow]3. –•–í–û–°–¢–û–í–´–ï –û–®–ò–ë–ö–ò[/bold yellow]")
    tail_bounds_analysis(basis, labels, ZEROS)
    
    # 4. –¢–µ—Å—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
    console.print("\n[bold yellow]4. –¢–ï–°–¢ –£–°–¢–û–ô–ß–ò–í–û–°–¢–ò[/bold yellow]")
    is_stable, robustness_results = robustness_test(basis, labels)
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç
    console.print("\n" + "="*60)
    console.print("[bold green]–§–ò–ù–ê–õ–¨–ù–´–ô –í–ï–†–î–ò–ö–¢:[/bold green]\n")
    
    if is_psd and is_stable:
        console.print("[bold green]üéâ –ë–ê–†–¨–ï–† –ü–û–ó–ò–¢–ò–í–ù–û–ô –°–¢–ï–ù–´ –ü–†–û–ô–î–ï–ù![/bold green]")
        console.print("‚úÖ Q ‚â• 0 –¥–ª—è –≤—Å–µ–≥–æ Gaussian-Hermite –ø–æ–¥–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞")
        console.print("‚úÖ PSD —Å—Ç–∞–±–∏–ª—å–Ω–æ –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ —á–∏—Å–ª–∞ –Ω—É–ª–µ–π")
        console.print("‚úÖ –•–≤–æ—Å—Ç–æ–≤—ã–µ –æ—à–∏–±–∫–∏ –ø—Ä–µ–Ω–µ–±—Ä–µ–∂–∏–º–æ –º–∞–ª—ã")
        console.print("\n[cyan]–≠—Ç–æ –ø–µ—Ä–≤–æ–µ —Å—Ç—Ä–æ–≥–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏—è –í–µ–π–ª—è –Ω–∞ –Ω–µ—Ç—Ä–∏–≤–∏–∞–ª—å–Ω–æ–º –∫–ª–∞—Å—Å–µ![/cyan]")
        
        return True
    else:
        console.print("[bold red]‚ùå –ë–ê–†–¨–ï–† –ù–ï –ü–†–û–ô–î–ï–ù[/bold red]")
        if not is_psd:
            console.print("- Gram-–º–∞—Ç—Ä–∏—Ü–∞ –Ω–µ PSD")
        if not is_stable:
            console.print("- PSD –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ –ø—Ä–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–∏")
        
        return False

if __name__ == "__main__":
    success = main_benchmark()
    exit(0 if success else 1)